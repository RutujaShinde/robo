{"version":3,"sources":["component/card/card.js","component/cardlist/cardlist.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","users","map","user","key","App","componentDidMount","e","fetch","then","response","json","data","setState","filteredcard","seaarchfield","target","value","state","console","log","this","filteredRobot","filter","toLowerCase","includes","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAeeA,G,kBAbJ,SAACC,GAEX,OACC,yBAAKC,UAAU,YAEf,yBAAKC,IAAG,wCAAmCF,EAAMG,IAAMC,IAAI,SAC3D,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCJCC,EAAW,SAAC,GACxB,IADyBC,EAC1B,EAD0BA,MAEzB,OACC,yBAAKP,UAAU,QACdO,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAIA,GAAIO,EAAKP,GAAIE,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,aCiCpEM,E,YAlCX,aACC,IAAD,8BACE,+CAGJC,kBAAkB,SAACC,GAEXC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAE,EAAKC,SAAS,CAACZ,MAAMW,QARvC,EAWEE,aAAa,SAACP,GAEV,EAAKM,SAAS,CAACE,aAAaR,EAAES,OAAOC,SAXzC,EAAKC,MAAM,CAACjB,MAAM,GAAGc,aAAa,IAFpC,E,sEAgBD,IAAD,OACGI,QAAQC,IAAIC,KAAKH,MAAMjB,OAD1B,IAGSqB,EADOD,KAAKH,MAAZjB,MACoBsB,QAAO,SAAAR,GAAY,OAAEA,EAAajB,KAAK0B,cAAcC,SAAS,EAAKP,MAAMH,aAAaS,kBAEnH,OAEE,yBAAK9B,UAAU,OACX,2CACA,2BAAOgC,KAAK,OAAOC,YAAY,gBAAgBC,SAAUP,KAAKP,eAE9D,kBAAC,EAAD,CAAUb,MAAOqB,S,GA9BPO,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.704bf559.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\nconst Card=(props)=>\r\n{\r\n\treturn(\r\n\t\t<div className='robocard'>\r\n\t\t\r\n\t\t<img src={`https://robohash.org/swapnali/${props.id}`} alt=\"robo\"/>\r\n\t\t<h2>{props.name}</h2>\r\n\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\r\n\r\n\t\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport  './cardlist.css';\r\nimport Card from '../card/card.js';\r\n\r\n\r\nexport const CardList = ({users}) =>\r\n{\r\n\treturn(\r\n\t\t<div className=\"list\">\r\n\t\t{users.map(user => <Card key={user.id} id={user.id} name={user.name} email={user.email}/>)}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default CardList;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n//import Card from './component/card/card.js';\nimport {CardList} from './component/cardlist/cardlist.js';\n\nclass App extends React.Component \n{\n    constructor()\n    {\n      super()\n      this.state={users:[],seaarchfield:\"\"}\n    }\n  componentDidMount=(e)=>\n        {\n          fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response=>response.json())\n          .then(data=>this.setState({users:data}));\n     \n        }\n      filteredcard=(e)=>\n        {\n          this.setState({seaarchfield:e.target.value})\n        }\n  render()\n  {\n     console.log(this.state.users)\n     const{users}=this.state;\n     const filteredRobot=users.filter(seaarchfield=>seaarchfield.name.toLowerCase().includes(this.state.seaarchfield.toLowerCase()));\n  \n  return(\n\n    <div className=\"App\">\n        <h1>Robo Friend</h1>\n        <input type=\"text\" placeholder=\"search robots\" onChange={this.filteredcard}/>\n       \n        <CardList users={filteredRobot}/>\n      \n    </div>\n       );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}